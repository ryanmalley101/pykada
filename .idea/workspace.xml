<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="ca47c520-58fd-48ae-9dad-6c38aaead4d9" name="Changes" comment="Took a hard right turn when I noticed that there was a significant improvement to be made with regards to how I handle the requests module. Now I take the same object oriented approach to using a request manager. The request manager handles changes to retry logic, delays, and contains the requests themselves overridden from the `requests` module.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/pykada/verkada_client.py" beforeDir="false" afterPath="$PROJECT_DIR$/pykada/verkada_client.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="26a15ddd-e8ed-483d-8a6f-24db96f70b22" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="30COUriJjZiWE6Wt4yvZoKUdGTE" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;Python tests.Doctests in models.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_classic_alarms.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in testbed.py.executor&quot;: &quot;Run&quot;,
    &quot;Python.access_control.executor&quot;: &quot;Debug&quot;,
    &quot;Python.api_tokens.executor&quot;: &quot;Run&quot;,
    &quot;Python.cameras.executor&quot;: &quot;Run&quot;,
    &quot;Python.classic_alarms.executor&quot;: &quot;Run&quot;,
    &quot;Python.generate_functional_wrappers.executor&quot;: &quot;Run&quot;,
    &quot;Python.test_client.executor&quot;: &quot;Run&quot;,
    &quot;Python.testbed.executor&quot;: &quot;Run&quot;,
    &quot;Python.verkada_requests.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/ryan.malley/PycharmProjects/pykada/pykada/cameras/testbed&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/pykada/cameras/testbed" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/pykada/access_control" />
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-4c141bd692a7-e2d783800521-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.26927.90" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ca47c520-58fd-48ae-9dad-6c38aaead4d9" name="Changes" comment="" />
      <created>1753128106858</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1753128106858</updated>
    </task>
    <task id="LOCAL-00001" summary="Bringing the project back! Had to nuke the old repo for reasons I'm too ashamed to admit. But its all back, with some improvements/bug fixes from the previous repo to boot!">
      <option name="closed" value="true" />
      <created>1753128641671</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1753128641671</updated>
    </task>
    <task id="LOCAL-00002" summary="Update to include the distribution files for PyPi">
      <option name="closed" value="true" />
      <created>1753130027131</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1753130027131</updated>
    </task>
    <task id="LOCAL-00003" summary="Trying to take a client-based approach to handle multiple API keys being used in a project (also just generally moving away from requiring .env files). Still haven't tested this out, so the next step is to run the cameras testbed and see where we get. I feel like the iterate_paginated_results bit is broken now, but that remains to be seen.">
      <option name="closed" value="true" />
      <created>1754410785443</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1754410785443</updated>
    </task>
    <task id="LOCAL-00004" summary="The object-oriented approach seems to be working better now. I think I'll need to pass a full token manager to the mixin classes of VerkadaClient, but at the very least the functional approach is preserved in the cameras case. Let's try some of the smaller product lines (API-wise) before tackling AC. Changes around the get_api_token function to specifically calling out that it gets the &quot;default&quot; token from the .env key.">
      <option name="closed" value="true" />
      <created>1754442775689</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1754442775689</updated>
    </task>
    <task id="LOCAL-00005" summary="The object-oriented approach seems to be working better now. I think I'll need to pass a full token manager to the mixin classes of VerkadaClient, but at the very least the functional approach is preserved in the cameras case. Let's try some of the smaller product lines (API-wise) before tackling AC. Changes around the get_api_token function to specifically calling out that it gets the &quot;default&quot; token from the .env key.">
      <option name="closed" value="true" />
      <created>1754442805049</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1754442805049</updated>
    </task>
    <task id="LOCAL-00006" summary="With the object oriented approach cemented, I've gone in and generated the functional files through a code generation function (not saved in git for now). It takes in the functions in a class and spits out the documented functional versions. &#10;&#10;I also collapsed the access control functions into one giant file. Its a lot to handle but I think it makes more sense than having a bunch of smaller ones. Also merged the viewingstation function into the cameras one.">
      <option name="closed" value="true" />
      <created>1754967110845</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1754967110845</updated>
    </task>
    <task id="LOCAL-00007" summary="Fixed a bug in the workplace system. Access level APIs are still broken.">
      <option name="closed" value="true" />
      <created>1754968250226</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1754968250226</updated>
    </task>
    <task id="LOCAL-00008" summary="Updated the constructor for the various clients so that they can accept a TokenManager rather than an API token. I should probably wrap these in an interface or parent class so that I can stop reusing so much code. Being able to return the token manager for instance would be helpful if you want to reuse a token manager.">
      <option name="closed" value="true" />
      <created>1754971644726</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1754971644726</updated>
    </task>
    <task id="LOCAL-00009" summary="Added a parent class to the various clients, now the intialization is all the same. I'll probably add some getters and setters soon. Also ripped through Access Control finally. Fixed a few small errors that had me stuck for a while, specifically with calendar exceptions.">
      <option name="closed" value="true" />
      <created>1755048290615</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1755048290615</updated>
    </task>
    <task id="LOCAL-00010" summary="Remove a hard coded access group ID">
      <option name="closed" value="true" />
      <created>1755049299883</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1755049299883</updated>
    </task>
    <task id="LOCAL-00011" summary="Took a hard right turn when I noticed that there was a significant improvement to be made with regards to how I handle the requests module. Now I take the same object oriented approach to using a request manager. The request manager handles changes to retry logic, delays, and contains the requests themselves overridden from the `requests` module.">
      <option name="closed" value="true" />
      <created>1755120707912</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1755120707912</updated>
    </task>
    <option name="localTasksCounter" value="12" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Bringing the project back! Had to nuke the old repo for reasons I'm too ashamed to admit. But its all back, with some improvements/bug fixes from the previous repo to boot!" />
    <MESSAGE value="Update to include the distribution files for PyPi" />
    <MESSAGE value="Trying to take a client-based approach to handle multiple API keys being used in a project (also just generally moving away from requiring .env files). Still haven't tested this out, so the next step is to run the cameras testbed and see where we get. I feel like the iterate_paginated_results bit is broken now, but that remains to be seen." />
    <MESSAGE value="The object-oriented approach seems to be working better now. I think I'll need to pass a full token manager to the mixin classes of VerkadaClient, but at the very least the functional approach is preserved in the cameras case. Let's try some of the smaller product lines (API-wise) before tackling AC. Changes around the get_api_token function to specifically calling out that it gets the &quot;default&quot; token from the .env key." />
    <MESSAGE value="With the object oriented approach cemented, I've gone in and generated the functional files through a code generation function (not saved in git for now). It takes in the functions in a class and spits out the documented functional versions. &#10;&#10;I also collapsed the access control functions into one giant file. Its a lot to handle but I think it makes more sense than having a bunch of smaller ones. Also merged the viewingstation function into the cameras one." />
    <MESSAGE value="Fixed a bug in the workplace system. Access level APIs are still broken." />
    <MESSAGE value="Updated the constructor for the various clients so that they can accept a TokenManager rather than an API token. I should probably wrap these in an interface or parent class so that I can stop reusing so much code. Being able to return the token manager for instance would be helpful if you want to reuse a token manager." />
    <MESSAGE value="Added a parent class to the various clients, now the intialization is all the same. I'll probably add some getters and setters soon. Also ripped through Access Control finally. Fixed a few small errors that had me stuck for a while, specifically with calendar exceptions." />
    <MESSAGE value="Remove a hard coded access group ID" />
    <MESSAGE value="Took a hard right turn when I noticed that there was a significant improvement to be made with regards to how I handle the requests module. Now I take the same object oriented approach to using a request manager. The request manager handles changes to retry logic, delays, and contains the requests themselves overridden from the `requests` module." />
    <option name="LAST_COMMIT_MESSAGE" value="Took a hard right turn when I noticed that there was a significant improvement to be made with regards to how I handle the requests module. Now I take the same object oriented approach to using a request manager. The request manager handles changes to retry logic, delays, and contains the requests themselves overridden from the `requests` module." />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/pykada/access_control/testbed/testbed.py</url>
          <line>539</line>
          <option name="timeStamp" value="10" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>